{"name":"avr-based-event-recorder-with-usb-support","tagline":"AVR-based event logger with USB support","body":"# AVR-based event recorder with USB support\r\n\r\nEvent recorder device based on AVR processor, with the USB support enabled via V-USB library.\r\n\r\n* **Project code name**: Fisherman's Friend\r\n* **Homepage**: https://github.com/vladast/avr-based-event-recorder-with-usb-support\r\n\r\n## Hardware\r\n\r\nKey components of the hardware implementation are:\r\n* **Atmel's Atmega8 processor**: a heart of the device, within which all logic lies.\r\n* **ST's 24c64 EEPROM**: a persistent memory of the device.\r\n\r\nSchematic diagram and PCB outline are created with Eagle v6 and can be found within **hw** directory.\r\n\r\n## Software\r\n\r\nSoftware part of the project consist of two parts:\r\n* **Firmware**: a program being uploaded to device.\r\n* **Test application**: a program running on host machine.\r\n\r\nProgramming languages used: C & C++.\r\n\r\nSource code is located within **sw** directory.\r\n\r\n## Configuration\r\n\r\nThere are couple of properties that have to be updated within Makefile before build can be started - following values should be set correctly:\r\n* **PROGRAMMER**: By default, it states *rs232* which is the programmer used on test circuit. It should be set to the programmer's name from avrdude's configuration.\r\n* **USB_CFG_VENDOR_ID**: USB VID 16bit value (see Makefile comments for more info, or refer to V-USB's site)\r\n* **USB_CFG_DEVICE_ID**: USB PID 16bit value (see Makefile comments for more info, or refer to V-USB's site)\r\n* **USB_CFG_VENDOR_NAME**: Name of the vendor. By default, for testing purposes, it's set to \"TEST\"\r\n* **USB_CFG_VENDOR_NAME_LEN**: Number of chars within your vendor's name. For \"TEST\" string, that number is 4.\r\n* **USB_CFG_DEVICE_NAME**: Name of your product. By default, for testing purposes, it's set to \"TEST\"\r\n* **USB_CFG_DEVICE_NAME_LEN**: Number of chars within your vendor's name. For \"TEST\" string, that number is 4.\r\n\r\n## Build procedure\r\n\r\nAt this moment, Makefile has only been intended for usage on Linux-based build machines with gcc and avr-gcc compilers installed. \r\nIn general, with some modifications, it can be used on other platforms.\r\n\r\nTo build both firmware and test application run:\r\n\r\n```\r\nmake build\r\n```\r\n\r\nTo build only device's firmware (HEX file):\r\n\r\n```\r\nmake build_hex\r\n```\r\n\r\nAnd to build only test application for host machine:\r\n\r\n```\r\nmake build_test\r\n```\r\n\r\nTo list all options from Makefile, run:\r\n\r\n```\r\nmake\r\n```\r\n\r\n## Uploading firmware onto device\r\n\r\nUsed Makefile is configured for usage of *avrdude* programmer. To upload firmware to AVR located on device run:\r\n\r\n```\r\nmake burn_firmware\r\n```\r\n\r\n**Note**: To use external crystal oscillator, for AVR chip used (which is Atmega8 at this moment), fuses has to be set first. To do so, run:\r\n\r\n```\r\nmake burn_fuses\r\n```\r\n\r\nOf course, both of those commands should be issued as is from **sw** directory.\r\n\r\n## 3rd party libraries\r\n\r\nFollowing libraries are used:\r\n\r\n* **V-USB**: A firmware-only USB driver for Atmel AVR Microcontrollers, enabling USB communication with host device. Library itself and documentation can be found on www.obdev.at/vusb/. \r\nV-USB is licensed under GPL version 2.\r\n* **24C EEPROM SPI**: Enables easy SPI communication with external EEPROM. It's usage is well described on http://extremeelectronics.co.in/avr-tutorials/easy-24c-i2c-serial-eeprom-interfacing-with-avr-microcontrollers/\r\n\r\n\r\n## Author and Licence\r\n\r\n**avr-based-event-recorder-with-usb-support** repository is maintained by *Vladimir Stankovic* (@vladast).\r\n\r\nThis project is licensed under *GPL Version 2*. Please, refer to LICENSE file for the full text of the license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}